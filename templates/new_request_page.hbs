<div class="container-divider"></div>
<div class="container">
  <nav class="sub-nav">
    {{breadcrumbs}}
    <div class="search-container">
      <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" focusable="false" viewBox="0 0 12 12" class="search-icon" aria-hidden="true">
        <circle cx="4.5" cy="4.5" r="4" fill="none" stroke="currentColor"/>
        <path stroke="currentColor" stroke-linecap="round" d="M11 11L7.5 7.5"/>
      </svg>
      {{search submit=false}}
    </div>
  </nav>
<div class="pano-request-page">
  <h1>
    {{t 'submit_a_request'}}
    <span class="follow-up-hint">
      {{follow_up}}
    </span>
  </h1>

  <div id="main-content" class="form">
    {{request_form wysiwyg=true}}
  </div>
  </div>
</div>


<script type="text/javascript">
    // implements article suggestion based on request type and subtype

    // constants

    const REQUEST_TYPE_FIELD_ID = "request_custom_fields_7262280655762"
    const SUB_TYPE_FIELD_IDS = ["request_custom_fields_7262368681490", "request_custom_fields_7262497953042", "request_custom_fields_7262556008338", "request_custom_fields_7262559730578", "request_custom_fields_7262622636946", "request_custom_fields_7262570577298"]
    const REQUEST_TYPES_WITHOUT_SUB_TYPE = ["suggestions", "request_other"]
    const GOOGLE_APPS_SCRIPT_URL = "https://script.google.com/macros/s/AKfycbzPbQdZ_HGkKz5mMU4iu8LRK3QaJF5_e09V-EExzcSzBnhrholKTmLzyZlA9sgTJiyI/exec"
    const SUGGESTED_ARTICLES_CONTAINER_ID = "suggested_articles_container"
    const DESCRIPTION_FIELD_ID = "request_description_mimetype"

    // functions

    const makeGASRequet = async () => {
        const response = await fetch(GOOGLE_APPS_SCRIPT_URL)
        let result = null

        if (response.status === 200) {
            const jsonData = await response.text()

            try {
                result = JSON.parse(jsonData)
            } catch (error) {
                console.log(error)
            }
        }

        return result
    }

    const createSuggestedArticlesContent = (articles) => {
        const articleLinksHTML = articles.map((article) => `<div><a target="_blank" href="${article.link}">${article.name}</a></div>`).join("")

        return `<label style="display: block;font-size: 13px;margin-bottom: 5px;">Suggested articles</label><div>${articleLinksHTML}</div>`
    }

    const setContainerIsVisible = (isVisible) => {
        const container = document.getElementById(SUGGESTED_ARTICLES_CONTAINER_ID)
        
        if (container) container.hidden = !isVisible
    }

    const appendSuggestedArticles = async (articlesData, category, subCategory) => {
        const { articles, categories } = articlesData
        const articlesList = []

        if (categories[category]) {
            let articleIds = []

            if (subCategory && categories[category][subCategory]) {
                articleIds = categories[category][subCategory]
            } else if (categories[category]["___default"]) {
                articleIds = categories[category]["___default"]
            }

            articlesList.push(...articleIds.map((articleId) => articles[articleId] || null).filter(Boolean))
        }

        if (articlesList && articlesList.length) {
            const content = createSuggestedArticlesContent(articlesList)
            let container = document.getElementById(SUGGESTED_ARTICLES_CONTAINER_ID)

            if (!container) {
                container = document.createElement("div")
                container.id = SUGGESTED_ARTICLES_CONTAINER_ID
                container.style = "margin-top: 25px"

                document.getElementById(DESCRIPTION_FIELD_ID).parentNode.before(container)
            }

            container.innerHTML = content
            setContainerIsVisible(true)
        } 
    }

    const main = async () => {
        let category = null
        let subCategory = null
        const articlesData = await makeGASRequet()

        document.getElementById("new_request").addEventListener("change", (event) => {
            const elem = event.target

            if (elem.id === REQUEST_TYPE_FIELD_ID) {
                category = elem.value
                subCategory = null

                SUB_TYPE_FIELD_IDS.forEach((id) => {
                    const inputElem = document.getElementById(id)

                    if (inputElem && !inputElem.disabled && inputElem.value) subCategory = inputElem.value
                }) 

                setContainerIsVisible(false)

                if (category) appendSuggestedArticles(articlesData, category, subCategory)
            } else if (SUB_TYPE_FIELD_IDS.includes(elem.id)) {
                subCategory = elem.value

                setContainerIsVisible(false)

                if (!category && document.getElementById(REQUEST_TYPE_FIELD_ID)) category = document.getElementById(REQUEST_TYPE_FIELD_ID).value
                if (category) appendSuggestedArticles(articlesData, category, subCategory)
            }
        })
    }

    // starter

    main()

</script>

<script type="text/javascript">

       // Force FullScreen for touch devices for somewhat better experience 
    
    document.addEventListener("touchend", setFullScreenTrue);

    function setFullScreenTrue() {
        openFullscreen();
    }

    function openFullscreen() {
        if (document.documentElement.requestFullscreen) {
            document.documentElement.requestFullscreen();
        } else if (document.documentElement.msRequestFullscreen) { /* IE11 */
            document.documentElement.msRequestFullscreen();
        }
    }

  
    // Fill in Field ID from your textarea 
    var browserfield_id = "7433937113490";
    try{
        document.querySelector('.request_custom_fields_' + browserfield_id).hidden = true;  //User Agent
        document.querySelector('.request_custom_fields_' + '7264112746642').hidden = true;  //OS Version
        document.querySelector('.request_custom_fields_' + '360015103320').hidden = true;   //Country
        document.querySelector('.request_custom_fields_' + '7484739424914').hidden = true;  //App Version
        document.querySelector('.request_custom_fields_' + '7264111625490').hidden = true;  //Device & RAM
        document.querySelector('.request_custom_fields_' + '8814891499794').hidden = true;  //Profile ID
        document.querySelector('.request_custom_fields_' + '10950862967186').hidden = true; //Hide Purchases
        document.querySelector('.request_custom_fields_' + '8837757970194').hidden = true;  //App Source for Georgian MP 
        document.querySelector('.request_custom_fields_' + '360015024660').hidden = true;  //Hide Game
    }catch(e){
        console.log('Cought an Error while hiding fields: ' + e);
    }
    /**
     * JavaScript Client Detection
     * (C) viazenetti GmbH (Christian Ludwig)
     */

    (function (window) {
        {
            var unknown = '-';
            
            // WebGL 2.0 Support
            var gotWebGL2Context;
            var isWebGl2Supported = "No";
            gotWebGL2Context = document.createElement('canvas').getContext('webgl2');
            if (gotWebGL2Context) {
                isWebGl2Supported = "Yes";
                console.log("WebGL2 is fully supported, I guess");
            }


            // screen
            var screenSize = '';
            if (screen.width) {
                let pixelRatio = window.devicePixelRatio;
                width = (screen.width) ? screen.width*pixelRatio : '';
                height = (screen.height) ? screen.height*pixelRatio : '';
                screenSize += '' + width + " x " + height;
            }

            // browser
            var nVer = navigator.appVersion;
            var nAgt = navigator.userAgent;
            var browser = navigator.appName;
            var version = '' + parseFloat(navigator.appVersion);
            var majorVersion = parseInt(navigator.appVersion, 10);
            var nameOffset, verOffset, ix;

            // Opera
            if ((verOffset = nAgt.indexOf('Opera')) != -1) {
                browser = 'Opera';
                version = nAgt.substring(verOffset + 6);
                if ((verOffset = nAgt.indexOf('Version')) != -1) {
                    version = nAgt.substring(verOffset + 8);
                }
            }
            // Opera Next
            if ((verOffset = nAgt.indexOf('OPR')) != -1) {
                browser = 'Opera';
                version = nAgt.substring(verOffset + 4);
            }
            // MSIE
            else if ((verOffset = nAgt.indexOf('MSIE')) != -1) {
                browser = 'Microsoft Internet Explorer';
                version = nAgt.substring(verOffset + 5);
            }
            // Chrome
            else if ((verOffset = nAgt.indexOf('Chrome')) != -1) {
                browser = 'Chrome';
                version = nAgt.substring(verOffset + 7);
            }
            // Safari
            else if ((verOffset = nAgt.indexOf('Safari')) != -1) {
                browser = 'Safari';
                version = nAgt.substring(verOffset + 7);
                if ((verOffset = nAgt.indexOf('Version')) != -1) {
                    version = nAgt.substring(verOffset + 8);
                }
            }
            // Firefox
            else if ((verOffset = nAgt.indexOf('Firefox')) != -1) {
                browser = 'Firefox';
                version = nAgt.substring(verOffset + 8);
            }
            // Facebook Stuff
            else if ((verOffset = nAgt.indexOf('FBAV')) != -1) {
                browser = 'Facebook Messenger';
                version = nAgt.substring(verOffset + 7);
            }
            // MSIE 11+
            else if (nAgt.indexOf('Trident/') != -1) {
                browser = 'Microsoft Internet Explorer';
                version = nAgt.substring(nAgt.indexOf('rv:') + 3);
            }
            // Other browsers
            else if ((nameOffset = nAgt.lastIndexOf(' ') + 1) < (verOffset = nAgt.lastIndexOf('/'))) {
                browser = nAgt.substring(nameOffset, verOffset);
                version = nAgt.substring(verOffset + 1);
                if (browser.toLowerCase() == browser.toUpperCase()) {
                    browser = navigator.appName;
                }
            }
            // trim the version string
            if ((ix = version.indexOf(';')) != -1) version = version.substring(0, ix);
            if ((ix = version.indexOf(' ')) != -1) version = version.substring(0, ix);
            if ((ix = version.indexOf(')')) != -1) version = version.substring(0, ix);

            majorVersion = parseInt('' + version, 10);
            if (isNaN(majorVersion)) {
                version = '' + parseFloat(navigator.appVersion);
                majorVersion = parseInt(navigator.appVersion, 10);
            }

            // mobile version
            var mobile = /Mobile|mini|Fennec|Android|iP(ad|od|hone)/.test(nVer);

            //location data
            let tempData;
            let locationData;
            var locationCountry = 0;
            var locationCity = 0;
            var locationIP = 0;
            fetch('https://api.ipgeolocation.io/ipgeo?apiKey=c100752fc3ef436dace7fae095ef4b70')
                .then(res => res.json())
                .then(data => {
                    console.log(data); //Outputs the JSON
                    tempData = data;
                    locationData = tempData;
                    locationCountry = locationData.country_name;
                    locationCity = locationData.city;
                    locationIP = locationData.ip;
                    console.log("Result: " + locationData.ip);
                });
                      fetch('https://api.ipify.org?format=json')
                              .then(res2 => res2.json())
                              .then(data2 => {
                                  console.log(data2); //Outputs the JSON
                                  tempIPData = data2;
                                  failsafeIP = tempIPData.ip;
                                  });
            //setTimeout(foo, 500);
            /*function foo () {
                locationCountry = locationData.country_code;
                locationCity = locationData.city;
                locationIP = locationData.ip;
                console.log("Result: " + locationData.ip);
            }*/


            // cookie
            var cookieEnabled = (navigator.cookieEnabled) ? true : false;

            if (typeof navigator.cookieEnabled == 'undefined' && !cookieEnabled) {
                document.cookie = 'testcookie';
                cookieEnabled = (document.cookie.indexOf('testcookie') != -1) ? true : false;
            }

            // system
            var os = unknown;
            var clientStrings = [
                {s:'Windows 10', r:/(Windows 10.0|Windows NT 10.0)/},
                {s:'Windows 8.1', r:/(Windows 8.1|Windows NT 6.3)/},
                {s:'Windows 8', r:/(Windows 8|Windows NT 6.2)/},
                {s:'Windows 7', r:/(Windows 7|Windows NT 6.1)/},
                {s:'Windows Vista', r:/Windows NT 6.0/},
                {s:'Windows Server 2003', r:/Windows NT 5.2/},
                {s:'Windows XP', r:/(Windows NT 5.1|Windows XP)/},
                {s:'Windows 2000', r:/(Windows NT 5.0|Windows 2000)/},
                {s:'Windows ME', r:/(Win 9x 4.90|Windows ME)/},
                {s:'Windows 98', r:/(Windows 98|Win98)/},
                {s:'Windows 95', r:/(Windows 95|Win95|Windows_95)/},
                {s:'Windows NT 4.0', r:/(Windows NT 4.0|WinNT4.0|WinNT|Windows NT)/},
                {s:'Windows CE', r:/Windows CE/},
                {s:'Windows 3.11', r:/Win16/},
                {s:'Android', r:/Android/},
                {s:'Open BSD', r:/OpenBSD/},
                {s:'Sun OS', r:/SunOS/},
                {s:'Linux', r:/(Linux|X11)/},
                {s:'iOS', r:/(iPhone|iPad|iPod)/},
                {s:'Mac OS X', r:/Mac OS X/},
                {s:'Mac OS', r:/(MacPPC|MacIntel|Mac_PowerPC|Macintosh)/},
                {s:'QNX', r:/QNX/},
                {s:'UNIX', r:/UNIX/},
                {s:'BeOS', r:/BeOS/},
                {s:'OS/2', r:/OS\/2/},
                {s:'Search Bot', r:/(nuhk|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask Jeeves\/Teoma|ia_archiver)/}
            ];
            for (var id in clientStrings) {
                var cs = clientStrings[id];
                if (cs.r.test(nAgt)) {
                    os = cs.s;
                    break;
                }
            }

            var osVersion = unknown;

            if (/Windows/.test(os)) {
                osVersion = /Windows (.*)/.exec(os)[1];
                os = 'Windows';
            }

            switch (os) {
                case 'Mac OS X':
                    osVersion = /Mac OS X (10[\.\_\d]+)/.exec(nAgt)[1];
                    break;

                case 'Android':
                    osVersion = /Android ([\.\_\d]+)/.exec(nAgt)[1];
                    break;

                case 'iOS':
                    osVersion = /OS (\d+)_(\d+)_?(\d+)?/.exec(nVer);
                    osVersion = osVersion[1] + '.' + osVersion[2] + '.' + (osVersion[3] | 0);
                    break;
            }

            // flash (you'll need to include swfobject)
            /* script src="//ajax.googleapis.com/ajax/libs/swfobject/2.2/swfobject.js" */
            var flashVersion = 'no check';
            if (typeof swfobject != 'undefined') {
                var fv = swfobject.getFlashPlayerVersion();
                if (fv.major > 0) {
                    flashVersion = fv.major + '.' + fv.minor + ' r' + fv.release;
                }
                else {
                    flashVersion = unknown;
                }
            }
        }
        setTimeout(collectData, 5000);
        function collectData () {
            window.jscd = {
                screen: screenSize,
                browser: browser,
                browserVersion: version,
                browserMajorVersion: majorVersion,
                mobile: mobile,
                os: os,
                osVersion: osVersion,
                WebGL2Support: isWebGl2Supported,
                cookies: cookieEnabled,
                flashVersion: flashVersion,
                countryCode: locationCountry,
                cityName: locationCity,
                userIP: failsafeIP
            };
        }

    }(this));

    // The code below makes sure the information above is been pushed into a hidden textarea.
    setTimeout(bar, 6000);
    function bar () {
        document.querySelector('#request_custom_fields_' + browserfield_id).value =
            'OS: ' + jscd.os + ' ' + jscd.osVersion + '\n' +
            'Browser: ' + jscd.browser + ' ' + jscd.browserMajorVersion +
            ' (' + jscd.browserVersion + ')\n' +
            'Mobile: ' + jscd.mobile + '\n' +
            'Cookies: ' + jscd.cookies + '\n' +
            'WebGL2 Support: ' + jscd.WebGL2Support + '\n' +
            'Screen Size: ' + jscd.screen + '\n' +
            'Country Code: ' + jscd.countryCode + '\n' +
            'City: ' + jscd.cityName + '\n' +
            'Player IP: ' + jscd.userIP + '\n\n' +
            'Full User Agent: ' + navigator.userAgent;
        //document.querySelector('.request_custom_fields_' + browserfield_id).hidden = true;
    }
</script>

